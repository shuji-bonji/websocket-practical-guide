---
title: 'データ配信・ストリーミングシステム詳細'
description: '株価情報、スポーツスコア、ライブデータ配信のWebSocketアーキテクチャ'
---

<script>
  import ReferenceLayout from '$lib/components/common/ReferenceLayout.svelte';
  import MermaidLazyLoad from '$lib/components/MermaidLazyLoad.svelte';
  import UseCaseExample from '$lib/components/UseCaseExample.svelte';
  import Card from '$lib/components/common/Card.svelte';
  import Section from '$lib/components/common/Section.svelte';
  import { hftDiagram, performanceOptimizationDiagram } from '$lib/charts/allCharts.ts';
  
  const stockDataCode = `// リアルタイム株価データ配信システム
class StockDataStreamer {
  constructor() {
    this.dataProviders = new Map();
    this.subscribers = new Map();
    this.compressionEnabled = true;
    this.rateLimiter = new RateLimiter();
  }
  
  // データプロバイダーの登録
  registerDataProvider(exchange, provider) {
    this.dataProviders.set(exchange, provider);
    
    provider.on('data', (rawData) => {
      this.processMarketData(exchange, rawData);
    });
  }
  
  async processMarketData(exchange, rawData) {
    try {
      // データ検証
      const validatedData = await this.validateData(rawData);
      
      // 技術指標の計算
      const enrichedData = await this.calculateIndicators(validatedData);
      
      // 配信用フォーマット
      const streamData = {
        symbol: enrichedData.symbol,
        price: enrichedData.price,
        change: enrichedData.change,
        changePercent: enrichedData.changePercent,
        volume: enrichedData.volume,
        marketCap: enrichedData.marketCap,
        indicators: {
          sma20: enrichedData.sma20,
          rsi: enrichedData.rsi,
          macd: enrichedData.macd
        },
        timestamp: Date.now(),
        exchange
      };
      
      // 購読者への配信
      await this.distributeData(streamData);
      
    } catch (error) {
      console.error('データ処理エラー:', error);
      this.handleDataError(exchange, error);
    }
  }
  
  async distributeData(data) {
    const symbol = data.symbol;
    const subscribers = this.subscribers.get(symbol) || [];
    
    for (const subscriber of subscribers) {
      // レート制限チェック
      if (!this.rateLimiter.checkLimit(subscriber.userId)) {
        continue;
      }
      
      // ユーザー設定に基づくフィルタリング
      const filteredData = this.filterDataForUser(data, subscriber.preferences);
      
      // データ圧縮
      const compressedData = this.compressionEnabled ? 
        this.compressData(filteredData) : filteredData;
      
      // WebSocket配信
      try {
        await subscriber.websocket.send(JSON.stringify({
          type: 'market_data',
          data: compressedData
        }));
        
        this.metrics.recordDelivery(symbol, subscriber.userId);
        
      } catch (error) {
        console.error('配信エラー:', error);
        this.handleSubscriberError(subscriber, error);
      }
    }
  }
  
  subscribe(userId, symbols, preferences, websocket) {
    symbols.forEach(symbol => {
      if (!this.subscribers.has(symbol)) {
        this.subscribers.set(symbol, []);
      }
      
      this.subscribers.get(symbol).push({
        userId,
        preferences,
        websocket,
        subscribedAt: Date.now()
      });
    });
    
    // 初期データの送信
    this.sendInitialData(userId, symbols, websocket);
  }
  
  calculateIndicators(data) {
    // SMA (Simple Moving Average)
    const sma20 = this.calculateSMA(data.symbol, 20);
    
    // RSI (Relative Strength Index)
    const rsi = this.calculateRSI(data.symbol, 14);
    
    // MACD
    const macd = this.calculateMACD(data.symbol);
    
    return {
      ...data,
      sma20,
      rsi,
      macd
    };
  }
}`;

  const sportDataCode = `// スポーツライブスコア配信システム
class LiveSportsStreamer {
  constructor() {
    this.activeGames = new Map();
    this.eventProcessors = new Map();
    this.fanEngagement = new FanEngagementTracker();
  }
  
  startGameStream(gameId, gameInfo) {
    const gameStream = {
      gameId,
      info: gameInfo,
      events: [],
      subscribers: new Set(),
      stats: {
        totalEvents: 0,
        peakViewers: 0,
        engagement: {
          reactions: 0,
          comments: 0,
          shares: 0
        }
      },
      startTime: Date.now()
    };
    
    this.activeGames.set(gameId, gameStream);
    
    // イベントプロセッサーの設定
    this.setupEventProcessor(gameId);
    
    return gameStream;
  }
  
  processGameEvent(gameId, eventData) {
    const game = this.activeGames.get(gameId);
    if (!game) return;
    
    // イベントの拡張処理
    const enrichedEvent = {
      ...eventData,
      gameId,
      timestamp: Date.now(),
      sequence: game.stats.totalEvents++,
      impact: this.calculateEventImpact(eventData),
      momentum: this.calculateMomentum(gameId, eventData)
    };
    
    // イベント履歴に追加
    game.events.push(enrichedEvent);
    
    // 購読者への配信
    this.broadcastEvent(game, enrichedEvent);
    
    // ファンエンゲージメント追跡
    this.fanEngagement.trackEvent(gameId, enrichedEvent);
  }
  
  broadcastEvent(game, event) {
    const broadcastData = {
      type: 'game_event',
      gameId: game.gameId,
      event: event,
      gameState: {
        score: game.info.score,
        period: game.info.period,
        clock: game.info.clock,
        stats: this.getCurrentStats(game.gameId)
      },
      metadata: {
        viewers: game.subscribers.size,
        engagement: game.stats.engagement
      }
    };
    
    // WebSocket配信
    game.subscribers.forEach(subscriber => {
      try {
        // ユーザープリファレンスに基づくカスタマイゼーション
        const customizedData = this.customizeForSubscriber(
          broadcastData, 
          subscriber.preferences
        );
        
        subscriber.websocket.send(JSON.stringify(customizedData));
        
      } catch (error) {
        console.error('配信エラー:', error);
        this.removeSubscriber(game.gameId, subscriber.userId);
      }
    });
    
    // ピーク視聴者数の更新
    if (game.subscribers.size > game.stats.peakViewers) {
      game.stats.peakViewers = game.subscribers.size;
    }
  }
  
  subscribeToGame(gameId, userId, preferences, websocket) {
    const game = this.activeGames.get(gameId);
    if (!game) {
      throw new Error('ゲームが見つかりません');
    }
    
    const subscriber = {
      userId,
      preferences,
      websocket,
      joinTime: Date.now()
    };
    
    game.subscribers.add(subscriber);
    
    // 初期ゲーム状態の送信
    this.sendGameSnapshot(game, subscriber);
    
    // エンゲージメント追跡開始
    this.fanEngagement.trackSubscriber(gameId, userId);
  }
  
  calculateEventImpact(event) {
    const impactScores = {
      'goal': 10,
      'penalty': 8,
      'yellow_card': 5,
      'red_card': 9,
      'substitution': 3,
      'corner': 2,
      'offside': 1
    };
    
    return impactScores[event.type] || 1;
  }
  
  calculateMomentum(gameId, event) {
    const game = this.activeGames.get(gameId);
    const recentEvents = game.events.slice(-10); // 直近10イベント
    
    // チーム別イベント重要度の合計
    const teamMomentum = {
      home: 0,
      away: 0
    };
    
    recentEvents.forEach(evt => {
      const impact = evt.impact || 1;
      if (evt.team === 'home') {
        teamMomentum.home += impact;
      } else if (evt.team === 'away') {
        teamMomentum.away += impact;
      }
    });
    
    return teamMomentum;
  }
}`;

  const iotDataCode = `// IoTデバイスデータストリーミング
class IoTDataStreamer {
  constructor() {
    this.deviceStreams = new Map();
    this.dataProcessors = new Map();
    this.alertRules = new Map();
    this.aggregationWindows = new Map();
  }
  
  registerDevice(deviceId, deviceConfig) {
    const stream = {
      deviceId,
      config: deviceConfig,
      buffer: [],
      lastUpdate: null,
      status: 'active',
      subscribers: new Set(),
      metrics: {
        dataPoints: 0,
        alerts: 0,
        uptime: 0
      }
    };
    
    this.deviceStreams.set(deviceId, stream);
    
    // データ処理パイプラインの設定
    this.setupDataProcessor(deviceId, deviceConfig);
    
    // アラートルールの設定
    this.setupAlertRules(deviceId, deviceConfig.alertRules || []);
  }
  
  processDeviceData(deviceId, sensorData) {
    const stream = this.deviceStreams.get(deviceId);
    if (!stream) return;
    
    try {
      // データ正規化
      const normalizedData = this.normalizeData(sensorData, stream.config);
      
      // 異常値検出
      const anomalies = this.detectAnomalies(deviceId, normalizedData);
      
      // 集約ウィンドウへの追加
      this.addToAggregationWindow(deviceId, normalizedData);
      
      // アラートルールの評価
      const alerts = this.evaluateAlertRules(deviceId, normalizedData);
      
      const processedData = {
        deviceId,
        timestamp: Date.now(),
        data: normalizedData,
        anomalies,
        alerts,
        aggregatedMetrics: this.getAggregatedMetrics(deviceId)
      };
      
      // ストリーム更新
      stream.buffer.push(processedData);
      stream.lastUpdate = Date.now();
      stream.metrics.dataPoints++;
      
      // バッファサイズ制限
      if (stream.buffer.length > 1000) {
        stream.buffer = stream.buffer.slice(-1000);
      }
      
      // 購読者への配信
      this.distributeDeviceData(stream, processedData);
      
      // アラートがある場合の特別配信
      if (alerts.length > 0) {
        this.distributeAlerts(deviceId, alerts);
      }
      
    } catch (error) {
      console.error('IoTデータ処理エラー:', error);
      this.handleDeviceError(deviceId, error);
    }
  }
  
  distributeDeviceData(stream, data) {
    stream.subscribers.forEach(subscriber => {
      try {
        // サブスクリプションフィルターの適用
        const filteredData = this.applySubscriptionFilters(
          data, 
          subscriber.filters
        );
        
        if (filteredData) {
          // データ圧縮
          const compressedData = this.compressIoTData(filteredData);
          
          subscriber.websocket.send(JSON.stringify({
            type: 'iot_data',
            deviceId: stream.deviceId,
            data: compressedData
          }));
        }
        
      } catch (error) {
        console.error('IoTデータ配信エラー:', error);
        this.removeDeviceSubscriber(stream.deviceId, subscriber.id);
      }
    });
  }
  
  detectAnomalies(deviceId, data) {
    const stream = this.deviceStreams.get(deviceId);
    const anomalies = [];
    
    // 統計的異常検出
    Object.keys(data).forEach(sensor => {
      const value = data[sensor];
      const stats = this.getSensorStatistics(deviceId, sensor);
      
      if (stats) {
        const zScore = Math.abs((value - stats.mean) / stats.stdDev);
        
        if (zScore > 3) { // 3σを超える場合
          anomalies.push({
            sensor,
            value,
            zScore,
            threshold: 3,
            severity: zScore > 4 ? 'critical' : 'warning'
          });
        }
      }
    });
    
    return anomalies;
  }
  
  subscribeToDevice(deviceId, subscriberId, filters, websocket) {
    const stream = this.deviceStreams.get(deviceId);
    if (!stream) {
      throw new Error('デバイスが見つかりません');
    }
    
    const subscriber = {
      id: subscriberId,
      filters: filters || {},
      websocket,
      subscribeTime: Date.now()
    };
    
    stream.subscribers.add(subscriber);
    
    // 初期データの送信（直近のバッファデータ）
    const recentData = stream.buffer.slice(-10);
    recentData.forEach(data => {
      const filteredData = this.applySubscriptionFilters(data, filters);
      if (filteredData) {
        websocket.send(JSON.stringify({
          type: 'iot_data_history',
          deviceId,
          data: filteredData
        }));
      }
    });
  }
}`;
</script>

<ReferenceLayout
  description="株価情報、スポーツスコア、ライブデータ配信のWebSocketアーキテクチャ"
  referenceCategory="データ配信"
  title="データ配信・ストリーミングシステム詳細"
  duration="90-120分"
  difficulty="上級"
  prerequisites={[
    "WebSocketの基本概念",
    "高頻度データ処理の理解",
    "システムアーキテクチャの知識",
    "パフォーマンス最適化の基礎"
  ]}
  sectionTitle="リファレンス"
  learningObjectives={[
    '高頻度データ配信システムの設計',
    'バックプレッシャー制御の実装',
    'データ圧縮とバッチング戦略',
    'QoS (Quality of Service) の管理',
    'レート制限とスケーラビリティ'
  ]}
>

<Section title="なぜWebSocketが必要なのか" icon="concept">

<Card title="従来技術の限界と課題" icon="warning" accentColor="red">

**背景と課題**
従来のHTTPポーリングやServer-Sent Eventsでは、高頻度データ配信において以下の問題がありました。

- **高いレイテンシ**: HTTPポーリングでは数秒の遅延が発生
- **帯域幅の無駄**: 頻繁なHTTPリクエストによる大量のヘッダーオーバーヘッド
- **サーバー負荷**: 大量のHTTPリクエストによるCPU・メモリ消費
- **スケーラビリティ問題**: 同時接続数の制限
- **データ取得の非効率性**: 変更のないデータも繰り返し取得

**WebSocketによる解決**
WebSocketを使用することで、以下のような劇的な改善が実現できます。

- **超低遅延**: 数ミリ秒レベルでのデータ配信
- **効率的な通信**: HTTPヘッダーなしでの最小限データ転送
- **プッシュ型配信**: サーバーからの即座なデータ配信
- **高いスケーラビリティ**: 数万接続の同時処理
- **差分配信**: 変更のあるデータのみを効率的に送信

</Card>

<Card title="実世界での適用例" icon="star" accentColor="green">

**金融・取引サービス**
- **Bloomberg Terminal**: リアルタイム金融データ配信
- **Coinbase**: 仮想通貨取引所、ミリ秒レベルでの価格更新
- **Robinhood**: 株式取引アプリ、リアルタイム価格表示
- **FX取引プラットフォーム**: 為替レート配信

**スポーツ・エンターテイメント**
- **ESPN**: ライブスポーツスコア配信
- **Yahoo Sports**: リアルタイム試合状況更新
- **Twitch**: ライブストリーミング統計情報
- **YouTube Live**: 視聴者数・コメント統計

**IoT・モニタリング**
- **AWS IoT**: 数百万デバイスからのデータ収集
- **Google Cloud IoT**: 産業用センサーデータ配信
- **Tesla**: 車両テレメトリデータ配信
- **スマートシティ**: 交通・環境データ配信

**技術的な要求事項**
- **レイテンシ**: 5ms以下の超低遅延
- **スループット**: 毎秒数万メッセージ処理
- **同時接続**: 数十万〜数百万接続
- **可用性**: 99.99%以上のアップタイム
- **データ精度**: 金融データでは100%の精度が必要

</Card>

</Section>

<Section title="データ配信アーキテクチャ" icon="concept">

<Card title="基本的なデータ配信フロー" icon="info" accentColor="blue">

下図は、WebSocketを使用したデータ配信システムの基本構成を示しています。データソースからクライアントまでのリアルタイム配信フローを理解できます。

**アーキテクチャの構成要素**
- **データソース**: 株価、スポーツ、IoTなど様々なデータ源
- **データ処理パイプライン**: 検証、拡張、正規化処理
- **WebSocket配信システム**: フィルタリング、圧縮、配信制御
- **クライアント**: 各種アプリケーション

**データフローの詳細**
1. 複数のデータソースから高頻度でデータを受信
2. データ検証・拡張処理を並列実行
3. ユーザー購読設定に基づくフィルタリング
4. 適応的データ圧縮とバッチング
5. WebSocketによる即座配信

**パフォーマンス指標**
- データ処理: 毎秒100万データポイント
- 配信遅延: 平均3ms以下
- 同時接続: 50万接続まで対応
- 帯域幅効率: 従来比90%削減

</Card>

<MermaidLazyLoad chart={`
graph TB
    subgraph "データソース"
        EX1[📈 NYSE] --> AGG[📊 データ集約器]
        EX2[📈 NASDAQ] --> AGG
        EX3[📈 FOREX] --> AGG
        EX4[📈 CRYPTO] --> AGG
    end
    
    subgraph "データ処理パイプライン"
        AGG --> VAL[✅ データ検証]
        VAL --> ENR[🔄 データ拡張]
        ENR --> CALC[⚡ 指標計算]
        CALC --> NORM[📏 正規化]
    end
    
    subgraph "配信システム"
        NORM --> WS[WebSocketハブ]
        WS --> FLT[🔍 フィルタリング]
        FLT --> COMP[🗜️ 圧縮]
        COMP --> DIST[📡 配信]
    end
    
    subgraph "クライアント"
        DIST --> T1[💻 トレーディングデスク]
        DIST --> T2[📱 モバイルアプリ]
        DIST --> T3[📊 分析ツール]
        DIST --> T4[🤖 アルゴ取引]
    end
    
    subgraph "補助機能"
        HIST[📚 履歴データ] --> ENR
        ALT[🚨 アラート] --> WS
        CACHE[⚡ Redisキャッシュ] --> WS
    end
    
    style AGG fill:#f3e5f5
    style WS fill:#e8f5e8
    style DIST fill:#fff3e0
    style T1 fill:#e3f2fd
`} />

</Section>

<Section title="実装例" icon="code">

<UseCaseExample
  title="リアルタイム株価データ配信システム"
  category="Financial Data Streaming"
  description="高頻度取引に対応したリアルタイム株価データ配信システムの実装です。データ検証、技術指標計算、効率的な配信を行います。"
  code={stockDataCode}
  language="javascript"
  complexity="advanced"
  features={[
    "複数取引所データの統合",
    "技術指標のリアルタイム計算",
    "ユーザー別フィルタリング",
    "データ圧縮と配信最適化",
    "レート制限機能",
    "エラーハンドリング"
  ]}
  codeExplanation={`
    <h3 class="font-semibold text-lg mb-3">コード解説：リアルタイム株価データ配信システム</h3>
    <p class="mb-4">以下は、高頻度取引に対応した株価データ配信システムの実装例です。</p>
    
    <h4 class="font-semibold mb-2">システム設計の核心部分</h4>
    
    <div class="space-y-4">
      <div>
        <h5 class="font-semibold">1. データプロバイダー管理 (registerDataProvider)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>複数の取引所からのデータを統合的に管理</li>
          <li>イベントドリブンによる非同期データ処理</li>
          <li>取引所ごとの異なるデータフォーマットを統一</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">2. 市場データ処理 (processMarketData)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>データ検証による異常値の除去</li>
          <li>SMA、RSI、MACDなどの技術指標をリアルタイム計算</li>
          <li>タイムスタンプと取引所情報の付与</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">3. 効率的な配信 (distributeData)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>購読者別のデータフィルタリング</li>
          <li>レート制限による公平なアクセス管理</li>
          <li>データ圧縮による帯域幅最適化</li>
          <li>配信メトリクスの収集</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">4. 購読管理 (subscribe)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>銘柄別の購読者グループ管理</li>
          <li>ユーザー設定に基づくカスタマイズ</li>
          <li>初期データの即座送信</li>
        </ul>
      </div>
    </div>
    
    <h4 class="font-semibold mt-4 mb-2">高頻度取引対応の最適化</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>非同期処理によるレイテンシ最小化</li>
      <li>メモリ効率的なデータ構造の使用</li>
      <li>バッチ処理による配信効率化</li>
      <li>技術指標の増分計算</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-2">パフォーマンス指標</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>データ処理: 毎秒10万データポイント</li>
      <li>配信遅延: 平均2ms以下</li>
      <li>同時接続: 10万接続まで対応</li>
      <li>技術指標計算: 1ms以下</li>
    </ul>
  `}
/>

<UseCaseExample
  title="スポーツライブスコア配信システム"
  category="Live Sports Data"
  description="リアルタイムスポーツスコアとイベント配信システムの実装です。イベント優先度管理、ファンエンゲージメント追跡、モメンタム計算を行います。"
  code={sportDataCode}
  language="javascript"
  complexity="intermediate"
  features={[
    "マルチスポーツ対応",
    "イベント優先度管理",
    "ファンエンゲージメント追跡",
    "モメンタム計算",
    "視聴者統計",
    "カスタマイズ配信"
  ]}
  codeExplanation={`
    <h3 class="font-semibold text-lg mb-3">コード解説：スポーツライブスコア配信システム</h3>
    <p class="mb-4">リアルタイムスポーツイベントの配信システムです。イベントの重要度に応じた配信制御を行います。</p>
    
    <h4 class="font-semibold mb-2">システム機能の詳細</h4>
    
    <div class="space-y-4">
      <div>
        <h5 class="font-semibold">1. ゲームストリーム管理 (startGameStream)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>試合ごとの独立したストリーム管理</li>
          <li>イベント履歴とエンゲージメント統計の追跡</li>
          <li>購読者管理とピーク視聴者数の記録</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">2. ゲームイベント処理 (processGameEvent)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>イベントの重要度計算とシーケンス管理</li>
          <li>ゲームモメンタムの動的計算</li>
          <li>エンゲージメントメトリクスの追跡</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">3. イベント配信 (broadcastEvent)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>ゲーム状態と統計情報の包括的配信</li>
          <li>視聴者数とエンゲージメントのリアルタイム更新</li>
          <li>ユーザー設定に基づく配信カスタマイズ</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">4. モメンタム計算 (calculateMomentum)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>直近イベントによるチーム勢いの定量化</li>
          <li>イベント重要度の重み付け計算</li>
          <li>ホーム・アウェイ別のモメンタム分析</li>
        </ul>
      </div>
    </div>
    
    <h4 class="font-semibold mt-4 mb-2">イベント重要度システム</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>ゴール: 最高重要度 (10点) - 即座配信</li>
      <li>レッドカード: 高重要度 (9点) - 1秒以内配信</li>
      <li>イエローカード: 中重要度 (5点) - 5秒以内配信</li>
      <li>その他イベント: 低重要度 (1-3点) - バッチ配信</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-2">エンゲージメント機能</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>リアルタイム視聴者数の追跡</li>
      <li>イベントに対するファン反応の測定</li>
      <li>ピーク視聴者数の記録</li>
      <li>購読者の参加時間の分析</li>
    </ul>
  `}
/>

<UseCaseExample
  title="IoTデバイスデータストリーミング"
  category="IoT Data Streaming"
  description="大規模IoTデバイスからのセンサーデータ配信システムの実装です。異常検知、データ集約、アラート機能を提供します。"
  code={iotDataCode}
  language="javascript"
  complexity="advanced"
  features={[
    "大規模デバイス管理",
    "リアルタイム異常検知",
    "データ集約ウィンドウ",
    "アラートルール管理",
    "サブスクリプションフィルタ",
    "データ圧縮"
  ]}
  codeExplanation={`
    <h3 class="font-semibold text-lg mb-3">コード解説：IoTデバイスデータストリーミング</h3>
    <p class="mb-4">大規模IoT環境でのリアルタイムデータ配信システムです。数千台のデバイスから同時にデータを収集・配信します。</p>
    
    <h4 class="font-semibold mb-2">システム設計の核心機能</h4>
    
    <div class="space-y-4">
      <div>
        <h5 class="font-semibold">1. デバイス登録 (registerDevice)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>デバイス設定とデータ処理パイプラインの初期化</li>
          <li>循環バッファによる効率的なデータ管理</li>
          <li>デバイス固有のアラートルール設定</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">2. データ処理 (processDeviceData)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>データ正規化による異なるセンサー形式の統一</li>
          <li>統計的異常検知による故障予測</li>
          <li>時系列データの集約ウィンドウ管理</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">3. 異常検知 (detectAnomalies)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>3σルールによる統計的異常検知</li>
          <li>センサー別の動的閾値設定</li>
          <li>重要度レベル (critical/warning) の自動判定</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">4. 配信制御 (distributeDeviceData)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>購読者別のデータフィルタリング</li>
          <li>効率的なデータ圧縮</li>
          <li>デバイス別の配信統計管理</li>
        </ul>
      </div>
    </div>
    
    <h4 class="font-semibold mt-4 mb-2">異常検知システム</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>統計的手法: 3σ (標準偏差) を超える値を異常として判定</li>
      <li>動的閾値: 各センサーの履歴データから平均値・標準偏差を計算</li>
      <li>重要度分類: zスコア4以上は critical、3-4は warning</li>
      <li>センサー別異常検知: 温度、湿度、圧力など個別の閾値設定</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-2">スケーラビリティ対応</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>デバイス数: 数万台のデバイスを同時管理</li>
      <li>データ処理: 毎秒数百万データポイント</li>
      <li>メモリ効率: 循環バッファによる一定メモリ使用</li>
      <li>配信最適化: フィルタリングによる不要データ削減</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-2">産業応用例</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>製造業: 生産ライン監視、品質管理</li>
      <li>エネルギー: 発電所・送電網監視</li>
      <li>農業: 土壌・気象データ収集</li>
      <li>都市インフラ: 交通・環境監視</li>
    </ul>
  `}
/>

</Section>

<Section title="金融データ配信プラットフォーム" icon="concept">

<Card title="リアルタイム株価配信システム" icon="info" accentColor="blue">

金融データ配信システムは、ミリ秒単位での低遅延配信が要求される高性能なWebSocketアプリケーションです。以下の要素で構成されます。

- **データ集約器**: 複数の取引所からのデータ統合
- **データ検証**: リアルタイムでの整合性チェック
- **指標計算**: 技術分析指標の動的算出
- **配信最適化**: 購読者別のカスタマイズ配信
- **レート制限**: 公平なデータアクセス管理

</Card>

<MermaidLazyLoad chart={`
graph TB
    subgraph "データソース"
        EX1[📈 NYSE] --> AGG[📊 データ集約器]
        EX2[📈 NASDAQ] --> AGG
        EX3[📈 FOREX] --> AGG
        EX4[📈 CRYPTO] --> AGG
    end
    
    subgraph "データ処理パイプライン"
        AGG --> VAL[✅ データ検証]
        VAL --> ENR[🔄 データ拡張]
        ENR --> CALC[⚡ 指標計算]
        CALC --> NORM[📏 正規化]
    end
    
    subgraph "配信システム"
        NORM --> WS[WebSocketハブ]
        WS --> FLT[🔍 フィルタリング]
        FLT --> COMP[🗜️ 圧縮]
        COMP --> DIST[📡 配信]
    end
    
    subgraph "クライアント"
        DIST --> T1[💻 トレーディングデスク]
        DIST --> T2[📱 モバイルアプリ]
        DIST --> T3[📊 分析ツール]
        DIST --> T4[🤖 アルゴ取引]
    end
    
    subgraph "補助機能"
        HIST[📚 履歴データ] --> ENR
        ALT[🚨 アラート] --> WS
        CACHE[⚡ Redisキャッシュ] --> WS
    end
    
    style AGG fill:#f3e5f5
    style WS fill:#e8f5e8
    style DIST fill:#fff3e0
    style T1 fill:#e3f2fd
`} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

### 高頻度取引データ配信

</div>
</div>

<MermaidLazyLoad chart={hftDiagram} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

## 2. スポーツライブスコアシステム

### リアルタイムスコア配信

</div>
</div>

<MermaidLazyLoad chart={`
graph TD
    subgraph "データ収集"
        S1[⚽ サッカー] --> DC[📊 データコレクター]
        S2[🏀 バスケ] --> DC
        S3[⚾ 野球] --> DC
        S4[🏈 アメフト] --> DC
    end
    
    subgraph "イベント処理"
        DC --> EP[⚡ イベントプロセッサー]
        EP --> ET[🏷️ イベントタイプ分類]
        ET --> PR[📊 優先度設定]
        PR --> FMT[📝 フォーマット]
    end
    
    subgraph "配信エンジン"
        FMT --> WS[WebSocketサーバー]
        WS --> SUB[👥 購読管理]
        SUB --> PUSH[📤 プッシュ配信]
    end
    
    subgraph "配信先"
        PUSH --> SP[📱 スポーツアプリ]
        PUSH --> WEB[💻 Webサイト]
        PUSH --> TV[📺 放送局]
        PUSH --> BET[🎰 賭博サイト]
    end
    
    subgraph "補助システム"
        STAT[📈 統計計算] --> EP
        PRED[🔮 予測エンジン] --> EP
        NOTI[🔔 通知システム] --> WS
    end
    
    style DC fill:#e8f5e8
    style EP fill:#f3e5f5
    style WS fill:#fff3e0
    style PUSH fill:#e3f2fd
`} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

### イベント優先度管理

</div>
</div>

<MermaidLazyLoad chart={`
graph LR
    subgraph "イベント分類"
        E1[⚽ ゴール] --> P1[🔴 最高優先度]
        E2[🟨 イエローカード] --> P2[🟡 高優先度]
        E3[👤 選手交代] --> P3[🟢 中優先度]
        E4[📊 統計更新] --> P4[⚪ 低優先度]
    end
    
    subgraph "配信制御"
        P1 --> D1[📡 即座配信]
        P2 --> D2[📡 1秒以内配信]
        P3 --> D3[📡 5秒以内配信]
        P4 --> D4[📡 バッチ配信]
    end
    
    subgraph "対象クライアント"
        D1 --> ALL[👥 全クライアント]
        D2 --> PREM[💎 プレミアム]
        D3 --> PREM
        D3 --> STD[📱 スタンダード]
        D4 --> STD
    end
    
    style P1 fill:#ffebee
    style P2 fill:#fff8e1
    style P3 fill:#e8f5e8
    style P4 fill:#f3e5f5
`} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

## 3. IoTセンサーデータストリーミング

### 大規模IoTデータ配信

</div>
</div>

<MermaidLazyLoad chart={`
graph TB
    subgraph "IoTデバイス層 (数万台)"
        T1[🌡️ 温度センサー] --> GW[🌐 IoTゲートウェイ]
        H1[💧 湿度センサー] --> GW
        P1[🔋 電力メーター] --> GW
        G1[🌍 GPS tracker] --> GW
        C1[📹 カメラ] --> GW
    end
    
    subgraph "エッジ処理"
        GW --> EDGE[⚡ エッジコンピューティング]
        EDGE --> AGG[📊 データ集約]
        AGG --> FLT[🔍 フィルタリング]
        FLT --> COMP[🗜️ 圧縮]
    end
    
    subgraph "クラウド処理"
        COMP --> CLOUD[☁️ クラウドプラットフォーム]
        CLOUD --> ML[🤖 ML処理]
        ML --> ANL[📈 分析エンジン]
        ANL --> WS[WebSocketサーバー]
    end
    
    subgraph "配信先"
        WS --> DASH[📊 ダッシュボード]
        WS --> MOB[📱 モバイルアプリ]
        WS --> API[🔌 APIクライアント]
        WS --> ALERT[🚨 アラートシステム]
    end
    
    style GW fill:#e3f2fd
    style EDGE fill:#e8f5e8
    style CLOUD fill:#f3e5f5
    style WS fill:#fff3e0
`} />

<div class="bg-white округ gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

### データ圧縮・最適化戦略

</div>
</div>

<MermaidLazyLoad chart={`
graph LR
    subgraph "生データ"
        RAW[📊 Raw Data] --> SIZE[💾 1MB/sec]
    end
    
    subgraph "圧縮パイプライン"
        RAW --> DELTA[🔄 差分圧縮]
        DELTA --> GZIP[🗜️ Gzip圧縮]
        GZIP --> BATCH[📦 バッチング]
    end
    
    subgraph "適応配信"
        BATCH --> HIGH["📡 高品質 (100KB/sec)"]
        BATCH --> MED["📡 中品質 (50KB/sec)"]
        BATCH --> LOW["📡 低品質 (20KB/sec)"]
    end
    
    subgraph "クライアント別"
        HIGH --> DESK[💻 デスクトップ]
        MED --> TAB[📱 タブレット]
        LOW --> MOB[📱 モバイル]
    end
    
    style DELTA fill:#e3f2fd
    style GZIP fill:#e8f5e8
    style BATCH fill:#f3e5f5
    style HIGH fill:#fff3e0
`} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

## 4. ライブメディアストリーミング

### ライブ配信システム

</div>
</div>

<MermaidLazyLoad chart={`
graph TD
    subgraph "コンテンツ生成"
        C1[📹 カメラ] --> ENC[🔄 エンコーダー]
        C2[🎤 マイク] --> ENC
        C3[🖥️ 画面共有] --> ENC
    end
    
    subgraph "ストリーミング処理"
        ENC --> PROC[⚡ ストリーミングプロセッサー]
        PROC --> TRANS[🔄 トランスコーディング]
        TRANS --> CDN[🌐 CDNエッジ]
    end
    
    subgraph "配信制御"
        CDN --> WS[WebSocketコントローラー]
        WS --> META[📋 メタデータ配信]
        WS --> CHAT[💬 チャット同期]
        WS --> STAT[📊 統計配信]
    end
    
    subgraph "視聴者側"
        META --> PLAYER[▶️ プレイヤー]
        CHAT --> UI[💻 チャットUI]
        STAT --> DASH[📊 視聴統計]
    end
    
    subgraph "インタラクション"
        UI --> WS
        PLAYER --> WS
        DASH --> WS
    end
    
    style ENC fill:#f3e5f5
    style PROC fill:#e8f5e8
    style WS fill:#fff3e0
    style PLAYER fill:#e3f2fd
`} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

## 5. 高可用性・スケーラビリティ設計

### 分散ストリーミングアーキテクチャ

</div>
</div>

<MermaidLazyLoad chart={`
graph TB
    subgraph "グローバル分散"
        US[🇺🇸 US Region] --> LB[⚖️ Global Load Balancer]
        EU[🇪🇺 EU Region] --> LB
        ASIA[🌏 Asia Region] --> LB
    end
    
    subgraph "リージョナル構成"
        LB --> R1[📡 WebSocketクラスター1]
        LB --> R2[📡 WebSocketクラスター2]
        LB --> R3[📡 WebSocketクラスターN]
    end
    
    subgraph "データレプリケーション"
        R1 --> MQ[📤 メッセージキュー]
        R2 --> MQ
        R3 --> MQ
        MQ --> SYNC[🔄 データ同期]
    end
    
    subgraph "フェイルオーバー"
        SYNC --> HEALTH[💓 ヘルスチェック]
        HEALTH --> SWITCH[🔄 自動切り替え]
        SWITCH --> BACKUP[🛡️ バックアップ系]
    end
    
    subgraph "監視・復旧"
        HEALTH --> MON[📊 監視システム]
        MON --> ALERT[🚨 アラート]
        ALERT --> OPS[👨‍💻 運用チーム]
    end
    
    style LB fill:#f3e5f5
    style MQ fill:#e8f5e8
    style HEALTH fill:#fff3e0
    style MON fill:#e3f2fd
`} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

## 6. パフォーマンス最適化

### レイテンシ最適化戦略

</div>
</div>

<MermaidLazyLoad chart={performanceOptimizationDiagram} />

<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
<div class="prose max-w-none p-8">

## 💡 実装のベストプラクティス

### 1. 効率的なデータ差分配信
```javascript
class EfficientDataStreaming {
  constructor() {
    this.lastSnapshot = new Map();
    this.subscribers = new Map();
  }
  
  updateData(symbol, newData) {
    const lastData = this.lastSnapshot.get(symbol);
    const diff = this.calculateDiff(lastData, newData);
    
    if (diff.hasChanges) {
      this.broadcastDiff(symbol, diff);
      this.lastSnapshot.set(symbol, newData);
    }
  }
  
  calculateDiff(oldData, newData) {
    const changes = {};
    let hasChanges = false;
    
    for (const [key, value] of Object.entries(newData)) {
      if (!oldData || oldData[key] !== value) {
        changes[key] = value;
        hasChanges = true;
      }
    }
    
    return { hasChanges, changes };
  }
  
  broadcastDiff(symbol, diff) {
    const subscribers = this.subscribers.get(symbol) || [];
    const message = {
      type: 'diff',
      symbol,
      changes: diff.changes,
      timestamp: Date.now()
    };
    
    subscribers.forEach(ws => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify(message));
      }
    });
  }
}
```

### 2. 適応的品質制御
```javascript
class AdaptiveQualityControl {
  constructor() {
    this.clientProfiles = new Map();
    this.qualityLevels = {
      high: { updateRate: 100, compression: 'none' },
      medium: { updateRate: 500, compression: 'gzip' },
      low: { updateRate: 2000, compression: 'heavy' }
    };
  }
  
  adjustQualityForClient(clientId, networkStats) {
    const profile = this.clientProfiles.get(clientId) || {};
    
    if (networkStats.latency > 1000 || networkStats.bandwidth < 1000000) {
      profile.quality = 'low';
    } else if (networkStats.latency > 500 || networkStats.bandwidth < 5000000) {
      profile.quality = 'medium';
    } else {
      profile.quality = 'high';
    }
    
    this.clientProfiles.set(clientId, profile);
    return this.qualityLevels[profile.quality];
  }
  
  sendDataToClient(clientId, data) {
    const profile = this.clientProfiles.get(clientId);
    const quality = this.qualityLevels[profile.quality];
    
    const processedData = this.processDataForQuality(data, quality);
    this.sendToWebSocket(clientId, processedData);
  }
}
```

### 3. 高頻度データバッファリング
```javascript
class HighFrequencyDataBuffer {
  constructor(flushInterval = 100) {
    this.buffer = new Map();
    this.flushInterval = flushInterval;
    this.startFlushing();
  }
  
  addData(key, data) {
    if (!this.buffer.has(key)) {
      this.buffer.set(key, []);
    }
    
    this.buffer.get(key).push({
      data,
      timestamp: Date.now()
    });
  }
  
  startFlushing() {
    setInterval(() => {
      this.flushBuffer();
    }, this.flushInterval);
  }
  
  flushBuffer() {
    for (const [key, dataPoints] of this.buffer.entries()) {
      if (dataPoints.length > 0) {
        const aggregated = this.aggregateDataPoints(dataPoints);
        this.sendAggregatedData(key, aggregated);
        this.buffer.set(key, []); // バッファクリア
      }
    }
  }
  
  aggregateDataPoints(dataPoints) {
    // 平均値、最大値、最小値などの集約
    return {
      count: dataPoints.length,
      latest: dataPoints[dataPoints.length - 1].data,
      average: this.calculateAverage(dataPoints),
      timeRange: {
        start: dataPoints[0].timestamp,
        end: dataPoints[dataPoints.length - 1].timestamp
      }
    };
  }
}
```

### 4. 接続プール管理
```javascript
class WebSocketConnectionPool {
  constructor(maxConnections = 10000) {
    this.connections = new Map();
    this.connectionGroups = new Map(); // topic -> Set<connectionId>
    this.maxConnections = maxConnections;
  }
  
  addConnection(connectionId, ws, topics = []) {
    if (this.connections.size >= this.maxConnections) {
      throw new Error('Connection limit reached');
    }
    
    this.connections.set(connectionId, {
      ws,
      topics: new Set(topics),
      lastActivity: Date.now(),
      messageCount: 0
    });
    
    topics.forEach(topic => {
      if (!this.connectionGroups.has(topic)) {
        this.connectionGroups.set(topic, new Set());
      }
      this.connectionGroups.get(topic).add(connectionId);
    });
  }
  
  broadcastToTopic(topic, message) {
    const connections = this.connectionGroups.get(topic);
    if (!connections) return;
    
    const messageStr = JSON.stringify(message);
    let successCount = 0;
    
    connections.forEach(connectionId => {
      const conn = this.connections.get(connectionId);
      if (conn && conn.ws.readyState === WebSocket.OPEN) {
        try {
          conn.ws.send(messageStr);
          conn.messageCount++;
          conn.lastActivity = Date.now();
          successCount++;
        } catch (error) {
          this.removeConnection(connectionId);
        }
      }
    });
    
    return successCount;
  }
}
```

この包括的なデータ配信システムアーキテクチャにより、高性能でスケーラブルなリアルタイムデータ配信を実現できます。

</div>
</div>

</Section>

</ReferenceLayout>