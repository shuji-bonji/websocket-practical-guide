---
title: '共同編集システム詳細'
description: 'リアルタイム文書編集、ホワイトボード、コードレビューシステムのWebSocketアーキテクチャ'
---

<script>
  import ReferenceLayout from '$lib/components/common/ReferenceLayout.svelte';
  import MermaidLazyLoad from '$lib/components/MermaidLazyLoad.svelte';
  import UseCaseExample from '$lib/components/UseCaseExample.svelte';
  import Card from '$lib/components/common/Card.svelte';
  import Section from '$lib/components/common/Section.svelte';
  
  const otCode = `// 操作変換 (OT) 実装
class OperationTransform {
  transform(op1, op2) {
    // 操作の種類に応じた変換ロジック
    if (op1.type === 'insert' && op2.type === 'insert') {
      return this.transformInsertInsert(op1, op2);
    }
    if (op1.type === 'insert' && op2.type === 'delete') {
      return this.transformInsertDelete(op1, op2);
    }
    if (op1.type === 'delete' && op2.type === 'insert') {
      return this.transformDeleteInsert(op1, op2);
    }
    if (op1.type === 'delete' && op2.type === 'delete') {
      return this.transformDeleteDelete(op1, op2);
    }
  }
  
  transformInsertInsert(op1, op2) {
    if (op1.position <= op2.position) {
      return [op1, { ...op2, position: op2.position + op1.length }];
    } else {
      return [{ ...op1, position: op1.position + op2.length }, op2];
    }
  }
  
  transformInsertDelete(op1, op2) {
    if (op1.position <= op2.position) {
      return [op1, { ...op2, position: op2.position + op1.length }];
    } else if (op1.position >= op2.position + op2.length) {
      return [{ ...op1, position: op1.position - op2.length }, op2];
    } else {
      // 削除範囲内への挿入
      return [op1, { ...op2, length: op2.length + op1.length }];
    }
  }
  
  // サーバー側の実装
  async handleOperation(clientId, operation) {
    const transformedOp = await this.transformAgainstHistory(operation);
    
    // 履歴に追加
    this.operationHistory.push({
      id: generateId(),
      clientId,
      operation: transformedOp,
      timestamp: Date.now()
    });
    
    // 他のクライアントに配信
    this.broadcastToOthers(clientId, transformedOp);
  }
}`;

  const crdtCode = `// CRDT (Yjs) 実装例
class YjsDocument {
  constructor() {
    this.doc = new Y.Doc();
    this.text = this.doc.getText('content');
    this.awareness = new Awareness(this.doc);
    this.setupWebSocketProvider();
  }
  
  setupWebSocketProvider() {
    this.provider = new WebsocketProvider(
      'ws://localhost:1234', 
      'document-room', 
      this.doc
    );
    
    // 接続状態の監視
    this.provider.on('status', event => {
      console.log(event.status); // connected/disconnected
    });
    
    // 同期イベント
    this.provider.on('sync', isSynced => {
      if (isSynced) {
        console.log('Document synced with server');
      }
    });
  }
  
  // テキスト操作
  insert(index, content) {
    this.text.insert(index, content);
    // 自動的に他のクライアントに同期
  }
  
  delete(index, length) {
    this.text.delete(index, length);
  }
  
  // カーソル位置の共有
  updateCursorPosition(position) {
    this.awareness.setLocalStateField('cursor', {
      position,
      color: this.userColor,
      name: this.userName
    });
  }
  
  // 他ユーザーのカーソル監視
  watchCursors(callback) {
    this.awareness.on('change', changes => {
      changes.added.forEach(clientId => {
        const state = this.awareness.getStates().get(clientId);
        callback('added', clientId, state?.cursor);
      });
      
      changes.updated.forEach(clientId => {
        const state = this.awareness.getStates().get(clientId);
        callback('updated', clientId, state?.cursor);
      });
      
      changes.removed.forEach(clientId => {
        callback('removed', clientId, null);
      });
    });
  }
}`;

  const drawingCode = `// リアルタイム描画最適化
class OptimizedDrawing {
  constructor() {
    this.strokeBuffer = [];
    this.throttleMs = 16; // 60fps
    this.compressionRatio = 0.5;
    this.setupThrottling();
  }
  
  setupThrottling() {
    setInterval(() => {
      if (this.strokeBuffer.length > 0) {
        this.sendBatchedStrokes();
        this.strokeBuffer = [];
      }
    }, this.throttleMs);
  }
  
  addPoint(x, y, pressure = 1.0) {
    this.strokeBuffer.push({ x, y, pressure, timestamp: Date.now() });
    this.renderLocally(x, y, pressure); // 即座にローカル描画
  }
  
  sendBatchedStrokes() {
    const compressed = this.compressStrokes(this.strokeBuffer);
    
    this.websocket.send(JSON.stringify({
      type: 'stroke_update',
      strokes: compressed,
      metadata: {
        tool: this.currentTool,
        color: this.currentColor,
        width: this.currentWidth
      }
    }));
  }
  
  compressStrokes(strokes) {
    // Douglas-Peucker アルゴリズムで点を削減
    return this.douglasPeucker(strokes, this.compressionRatio);
  }
  
  douglasPeucker(points, epsilon) {
    if (points.length <= 2) return points;
    
    // 最も遠い点を見つける
    let maxDistance = 0;
    let maxIndex = 0;
    
    for (let i = 1; i < points.length - 1; i++) {
      const distance = this.perpendicularDistance(
        points[i], points[0], points[points.length - 1]
      );
      if (distance > maxDistance) {
        maxDistance = distance;
        maxIndex = i;
      }
    }
    
    // 閾値以下なら中間点を削除
    if (maxDistance <= epsilon) {
      return [points[0], points[points.length - 1]];
    }
    
    // 再帰的に処理
    const left = this.douglasPeucker(points.slice(0, maxIndex + 1), epsilon);
    const right = this.douglasPeucker(points.slice(maxIndex), epsilon);
    
    return left.slice(0, -1).concat(right);
  }
}`;

  const codeReviewCode = `// コード共同レビューシステム
class CodeReviewSystem {
  constructor(documentId, userId) {
    this.documentId = documentId;
    this.userId = userId;
    this.websocket = null;
    this.comments = new Map();
    this.highlights = new Map();
    this.connect();
  }
  
  connect() {
    this.websocket = new WebSocket('ws://localhost:8080/review');
    
    this.websocket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      this.handleMessage(message);
    };
  }
  
  // コメント追加
  addComment(lineNumber, text, codeRange) {
    const comment = {
      id: generateId(),
      userId: this.userId,
      lineNumber,
      text,
      codeRange,
      timestamp: Date.now(),
      resolved: false
    };
    
    this.websocket.send(JSON.stringify({
      type: 'add_comment',
      comment
    }));
  }
  
  // コードハイライト
  highlightCode(startLine, endLine, type) {
    const highlight = {
      id: generateId(),
      userId: this.userId,
      startLine,
      endLine,
      type, // 'suggestion', 'issue', 'question'
      timestamp: Date.now()
    };
    
    this.websocket.send(JSON.stringify({
      type: 'add_highlight',
      highlight
    }));
  }
  
  // リアルタイムコード編集提案
  suggestEdit(lineNumber, originalCode, suggestedCode) {
    const suggestion = {
      id: generateId(),
      userId: this.userId,
      lineNumber,
      originalCode,
      suggestedCode,
      diff: this.createDiff(originalCode, suggestedCode),
      timestamp: Date.now()
    };
    
    this.websocket.send(JSON.stringify({
      type: 'suggest_edit',
      suggestion
    }));
  }
  
  // メッセージハンドリング
  handleMessage(message) {
    switch (message.type) {
      case 'comment_added':
        this.comments.set(message.comment.id, message.comment);
        this.renderComment(message.comment);
        break;
        
      case 'highlight_added':
        this.highlights.set(message.highlight.id, message.highlight);
        this.renderHighlight(message.highlight);
        break;
        
      case 'edit_suggested':
        this.showSuggestion(message.suggestion);
        break;
        
      case 'user_cursor':
        this.updateUserCursor(message.userId, message.position);
        break;
    }
  }
  
  // スレッド化されたディスカッション
  replyToComment(commentId, text) {
    const reply = {
      id: generateId(),
      parentId: commentId,
      userId: this.userId,
      text,
      timestamp: Date.now()
    };
    
    this.websocket.send(JSON.stringify({
      type: 'reply_comment',
      reply
    }));
  }
}`;
</script>

<ReferenceLayout
  title="共同編集システム詳細"
  description="リアルタイム文書編集、ホワイトボード、コードレビューシステムのWebSocketアーキテクチャ"
  duration="120-150分"
  difficulty="上級"
  prerequisites={[
    "WebSocketの基本概念",
    "JavaScriptの高度な理解",
    "アルゴリズムとデータ構造",
    "分散システムの基礎"
  ]}
  sectionTitle="リファレンス"
  referenceCategory="共同作業"
  learningObjectives={[
    'Operational Transformation (OT) アルゴリズムの実装',
    'CRDT (Conflict-free Replicated Data Types) の理解',
    'リアルタイム共同編集の仕組み',
    '競合解決とマージ戦略',
    'カーソル同期とプレゼンス機能'
  ]}
  relatedReferences={[
    { title: "リアルタイム通信システム", description: "チャット・メッセージング", icon: "💬", url: "/reference/websocket-examples/chat" },
    { title: "VR・メタバースシステム", description: "仮想空間での協働", icon: "🥽", url: "/reference/websocket-examples/vr-metaverse" }
  ]}
>

<Section title="なぜWebSocketが必要なのか" icon="concept">

<Card title="従来技術の限界と課題" icon="warning" accentColor="red">

**背景と課題**
従来のファイルロックシステムやバージョン管理システムでは、以下の問題がありました。

- **競合状態の発生**: 複数ユーザーが同時編集するとファイルがロックされる
- **編集結果の上書き**: 後から保存したユーザーが他の変更を上書き
- **リアルタイム性の欠如**: 他ユーザーの編集状態が精々では見えない
- **マージ競合の解決**: 手動での競合解決が必要
- **コミュニケーションコスト**: 編集意図の共有が困難

**WebSocketによる解決**
WebSocketを使用することで、以下のような改善が実現できます。

- **リアルタイム同時編集**: 複数ユーザーが同時に編集可能
- **競合の自動解決**: OTやCRDTアルゴリズムによる自動マージ
- **即座フィードバック**: 他ユーザーのカーソルや選択範囲をリアルタイム表示
- **ファイルロック不要**: ロックフリーでの同時編集
- **ユーザー体験の向上**: スムーズなコラボレーション体験

</Card>

<Card title="実世界での適用例" icon="star" accentColor="green">

**主要サービスでの採用事例**

- **Google Docs**: 3儈5000万ユーザー、リアルタイム文書編集のパイオニア
- **Notion**: チームナレッジマネジメント、リアルタイムブロック編集
- **Figma**: デザインツール、リアルタイムコラボレーション
- **VS Code Live Share**: コードエディタのリアルタイム共有
- **Miro**: ホワイトボードツール、リアルタイムビジュアルコラボレーション
- **Confluence**: リアルタイムWiki編集、チームナレッジシェアリング

**技術的な要求事項**
- **競合解決時間**: 50ms以下での操作結果統合
- **同時エディター数**: 1文書あたり100人までの同時編集
- **データ一貫性**: 最終的な一貫性保証
- **オフライン対応**: オフライン時の変更を接続復帰時に同期
- **パフォーマンス**: 不感のない編集体験の提供

</Card>

</Section>

<Section title="CRDTとOTアルゴリズム" icon="concept">

<Card title="同時編集アルゴリズムの比較" icon="info" accentColor="blue">

**Operational Transformation (OT) アルゴリズム**

- **特徴**: 操作を変換して競合を解決
- **メリット**: メモリ効率が良い、直感的な動作
- **デメリット**: 実装が複雑、サーバーの一中集中処理が必要
- **適用例**: Google Docs、Etherpad

**CRDT (Conflict-free Replicated Data Types) アルゴリズム**

- **特徴**: 競合が発生しないデータ構造
- **メリット**: 完全な分散処理、自動マージ
- **デメリット**: メモリ使用量が大きい、学習コストが高い
- **適用例**: Figma、Yjs、Automerge

**アルゴリズム選択のガイドライン**

| 要件 | OT推奨 | CRDT推奨 |
|------|-----------|------------|
| **テキスト編集** | ● | ○ |
| **構造化データ** | ○ | ● |
| **サーバーなしP2P** | ○ | ● |
| **高頻度更新** | ● | ○ |
| **オフライン対応** | ○ | ● |
| **シンプル実装** | ○ | ● |

</Card>

<MermaidLazyLoad chart={`
graph TB
    subgraph "クライアント側"
        A[👤 編集者A] --> A1[📝 ローカルエディタ]
        B[👤 編集者B] --> B1[📝 ローカルエディタ]
        C[👤 編集者C] --> C1[📝 ローカルエディタ]
    end
    
    A1 -->|操作送信| OT[🔄 OTサーバー]
    B1 -->|操作送信| OT
    C1 -->|操作送信| OT
    
    subgraph "サーバー側処理"
        OT --> TR[🔀 操作変換エンジン]
        TR --> ST[📊 状態管理]
        ST --> HB[📚 履歴バッファ]
        TR --> CF[⚡ 競合解決]
    end
    
    OT -->|変換済み操作| A1
    OT -->|変換済み操作| B1
    OT -->|変換済み操作| C1
    
    subgraph "永続化"
        ST --> DB[💾 文書データベース]
        HB --> HS[📜 履歴ストレージ]
    end
    
    style OT fill:#f3e5f5
    style TR fill:#e8f5e8
    style CF fill:#fff3e0
    style ST fill:#e3f2fd
`} />

<Card title="操作変換の詳細フロー" icon="info" accentColor="green">

操作変換により、複数ユーザーの同時編集が可能になります。

</Card>

<MermaidLazyLoad chart={`
sequenceDiagram
    participant A as 編集者A
    participant S as OTサーバー
    participant B as 編集者B
    
    Note over A,B: 初期状態: "Hello"
    
    A->>S: Insert(5, " World") -> "Hello World"
    B->>S: Insert(0, "Hi ") -> "Hi Hello"
    
    S->>S: 競合検知・操作変換
    Note over S: Transform: Insert(5, " World") vs Insert(0, "Hi ")
    Note over S: 結果: Insert(8, " World") (位置調整)
    
    S->>A: Apply: Insert(0, "Hi ")
    S->>B: Apply: Insert(8, " World")
    
    Note over A,B: 最終状態: "Hi Hello World"
    
    A->>A: ローカル状態更新
    B->>B: ローカル状態更新
`} />

</Section>

<Section title="CRDT システム" icon="concept">

<Card title="CRDTベースの分散編集" icon="info" accentColor="purple">

CRDTは競合のない分散データ構造で、自動的にマージ可能な編集を実現します。

</Card>

<MermaidLazyLoad chart={`
graph LR
    subgraph "編集者ノード"
        A[👤 ノードA] --> A1[📄 CRDT状態A]
        B[👤 ノードB] --> B1[📄 CRDT状態B]
        C[👤 ノードC] --> C1[📄 CRDT状態C]
    end
    
    A1 <-->|同期| B1
    B1 <-->|同期| C1
    A1 <-->|同期| C1
    
    subgraph "CRDT操作"
        A1 --> OP1[🔧 挿入操作]
        B1 --> OP2[🔧 削除操作]
        C1 --> OP3[🔧 更新操作]
    end
    
    subgraph "自動マージ"
        OP1 --> M[🔄 自動マージ]
        OP2 --> M
        OP3 --> M
        M --> CON[✅ 収束状態]
    end
    
    style A1 fill:#e3f2fd
    style B1 fill:#e8f5e8
    style C1 fill:#fff3e0
    style M fill:#f3e5f5
    style CON fill:#e1f5fe
`} />

</Section>

<Section title="リアルタイムホワイトボード" icon="concept" id="whiteboard">

<Card title="描画データのストリーミング" icon="info" accentColor="indigo">

ホワイトボードシステムは、低遅延での描画同期を実現します。

</Card>

<MermaidLazyLoad chart={`
graph TB
    subgraph "入力層"
        M[🖱️ マウス/タッチ] --> C[📐 座標取得]
        C --> S[✏️ ストローク生成]
    end
    
    subgraph "処理層"
        S --> SC[🎨 スタイル計算]
        SC --> OPT[⚡ 最適化処理]
        OPT --> COMP[🗜️ 圧縮]
    end
    
    subgraph "配信層"
        COMP --> WS[WebSocketサーバー]
        WS --> BR[📡 ブロードキャスト]
    end
    
    subgraph "レンダリング層"
        BR --> R1[🖼️ レンダラー1]
        BR --> R2[🖼️ レンダラー2]
        BR --> R3[🖼️ レンダラーN]
    end
    
    subgraph "同期管理"
        WS --> SYNC[🔄 同期エンジン]
        SYNC --> VS[📍 バージョン管理]
        VS --> HIST[📚 履歴管理]
    end
    
    style WS fill:#f3e5f5
    style SYNC fill:#e8f5e8
    style OPT fill:#fff3e0
`} />

<Card title="描画イベントの最適化" icon="success" accentColor="green">

描画パフォーマンスを最適化するための手法。

</Card>

<MermaidLazyLoad chart={`
sequenceDiagram
    participant U as ユーザー
    participant C as クライアント
    participant S as WebSocketサーバー
    participant O as 他のクライアント
    
    U->>C: 描画開始
    C->>C: ローカル描画
    C->>S: ストローク開始イベント
    
    loop 描画中 (高頻度)
        U->>C: 座標更新
        C->>C: ローカル描画継続
        C->>C: バッファリング (16ms間隔)
    end
    
    C->>S: バッファ済み座標群
    S->>O: 最適化済みストローク
    O->>O: 補間レンダリング
    
    U->>C: 描画終了
    C->>S: ストローク完了イベント
    S->>O: 最終ストローク
    
    Note over C,O: リアルタイム描画 + 最適化配信
`} />

</Section>

<Section title="コード共同レビューシステム" icon="concept">

<Card title="Live Code Review アーキテクチャ" icon="info" accentColor="amber">

リアルタイムコードレビューシステムの構成要素。

</Card>

<MermaidLazyLoad chart={`
graph TD
    subgraph "開発者"
        D1[👨‍💻 開発者1] --> E1[💻 エディタ1]
        D2[👩‍💻 開発者2] --> E2[💻 エディタ2]
        D3[👨‍💻 レビュアー] --> E3[💻 エディタ3]
    end
    
    E1 --> WS[WebSocketサーバー]
    E2 --> WS
    E3 --> WS
    
    subgraph "コード管理"
        WS --> CM[📝 コード管理]
        CM --> DI[🔍 差分計算]
        DI --> SY[🔄 シンタックス解析]
        SY --> AN[📊 静的解析]
    end
    
    subgraph "レビュー機能"
        WS --> RC[💬 レビューコメント]
        RC --> TH[🧵 スレッド管理]
        TH --> NO[🔔 通知システム]
    end
    
    subgraph "統合機能"
        AN --> CI[🔧 CI/CD連携]
        CI --> TEST[🧪 自動テスト]
        TEST --> REP[📊 レポート生成]
    end
    
    WS --> E1
    WS --> E2
    WS --> E3
    
    style WS fill:#f3e5f5
    style CM fill:#e8f5e8
    style RC fill:#fff3e0
    style AN fill:#e3f2fd
`} />

</Section>

<Section title="カーソル・選択範囲の同期" icon="flow">

<Card title="リアルタイム位置表示" icon="info" accentColor="teal">

共同編集における視覚的フィードバックの実装。

</Card>

<MermaidLazyLoad chart={`
graph LR
    subgraph "ユーザーA"
        A[👤 カーソル位置] --> A1[📍 座標計算]
        A1 --> A2[🎨 スタイル適用]
    end
    
    A2 --> WS[WebSocketサーバー]
    
    subgraph "位置管理"
        WS --> PM[📐 位置マッピング]
        PM --> CM[🔄 座標変換]
        CM --> UM[👥 ユーザー管理]
    end
    
    subgraph "ユーザーB"
        WS --> B1[📍 座標復元]
        B1 --> B2[👻 ゴーストカーソル]
        B2 --> B[👤 視覚表示]
    end
    
    subgraph "ユーザーC"
        WS --> C1[📍 座標復元]
        C1 --> C2[👻 ゴーストカーソル]
        C2 --> C[👤 視覚表示]
    end
    
    style WS fill:#f3e5f5
    style PM fill:#e8f5e8
    style A2 fill:#e3f2fd
    style B2 fill:#fff3e0
    style C2 fill:#fce4ec
`} />

</Section>

<Section title="パフォーマンス最適化戦略" icon="tips">

<Card title="データ圧縮・バッチング" icon="warning" accentColor="orange">

大規模な共同編集を支えるパフォーマンス最適化技術。

</Card>

<MermaidLazyLoad chart={`
graph TB
    subgraph "クライアント最適化"
        I[⌨️ 入力イベント] --> B[📦 バッチング]
        B --> C[🗜️ 圧縮]
        C --> D[🔄 差分計算]
    end
    
    subgraph "ネットワーク最適化"
        D --> RT[⏱️ レート制限]
        RT --> PR[📊 優先度判定]
        PR --> WS[WebSocket送信]
    end
    
    subgraph "サーバー最適化"
        WS --> DC[🔍 重複除去]
        DC --> ME[🔄 マージ処理]
        ME --> BC[📡 ブロードキャスト]
    end
    
    subgraph "受信側最適化"
        BC --> IN[📥 補間処理]
        IN --> AN[🎬 アニメーション]
        AN --> RE[🖼️ レンダリング]
    end
    
    style B fill:#e3f2fd
    style C fill:#e8f5e8
    style RT fill:#fff3e0
    style ME fill:#f3e5f5
    style IN fill:#fce4ec
`} />

</Section>

<Section title="実装例" icon="code">

<UseCaseExample
  title="操作変換 (OT) 実装"
  category="Operational Transformation"
  description="同時編集時の競合を解決するOperational Transformationアルゴリズムの実装です。挿入・削除操作の変換ロジックを含みます。"
  code={otCode}
  language="javascript"
  complexity="advanced"
  features={[
    "挿入・削除操作の変換",
    "操作履歴管理",
    "競合解決アルゴリズム",
    "サーバー側の同期処理",
    "ブロードキャスト配信",
    "一貫性保証"
  ]}
  codeExplanation={`
    <h3 class="font-semibold text-lg mb-3">コード解説：OTアルゴリズム実装</h3>
    <p class="mb-4">以下のコードは、Operational Transformationアルゴリズムの実装例です。</p>
    
    <h4 class="font-semibold mb-2">コードの各部分の詳細説明</h4>
    
    <div class="space-y-4">
      <div>
        <h5 class="font-semibold">1. 操作変換ロジック (transform メソッド)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>操作タイプの組み合わせによる分岐処理</li>
          <li>Insert vs Insert: 後の操作の位置を調整</li>
          <li>Insert vs Delete: 削除範囲と挿入位置の関係を分析</li>
          <li>Delete vs Delete: 重複削除の処理</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">2. 競合解決アルゴリズム (transformInsertInsert 等)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>位置比較による優先度決定</li>
          <li>文字長を考慮した位置調整</li>
          <li>削除範囲内への挿入処理</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">3. サーバー側の同期処理 (handleOperation メソッド)</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>履歴に基づいた操作変換</li>
          <li>操作履歴への追加と管理</li>
          <li>他クライアントへのブロードキャスト</li>
        </ul>
      </div>
    </div>
    
    <h4 class="font-semibold mt-4 mb-2">実装上の注意点</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>操作順序の一貫性保証</li>
      <li>メモリリークを防ぐ履歴サイズ制限</li>
      <li>ネットワークエラー時のロールバック処理</li>
      <li>パフォーマンス最適化のためのバッチ処理</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-2">セキュリティ考慮事項</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>クライアントからの操作験証</li>
      <li>悪意のある操作のフィルタリング</li>
      <li>レート制限によるDoS攻撃対策</li>
    </ul>
  `}
/>

<UseCaseExample
  title="CRDT (Yjs) 実装"
  category="CRDT Implementation"
  description="Yjsライブラリを使用したCRDTベースの共同編集実装です。自動マージと競合解決を実現します。"
  code={crdtCode}
  language="javascript"
  complexity="intermediate"
  features={[
    "自動同期機能",
    "競合のない編集",
    "カーソル位置共有",
    "Awareness API",
    "接続状態管理",
    "オフライン対応"
  ]}
  codeExplanation={`
    <h3 class="font-semibold text-lg mb-3">コード解説：CRDT (Yjs) 実装</h3>
    <p class="mb-4">以下のコードは、Yjsライブラリを使用したモダンなCRDTベースの実装例です。</p>
    
    <h4 class="font-semibold mb-2">コードの主要機能</h4>
    
    <div class="space-y-4">
      <div>
        <h5 class="font-semibold">1. Y.Doc と WebSocket Provider</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>Y.Doc: CRDTドキュメントのコアオブジェクト</li>
          <li>WebsocketProvider: リアルタイム同期のためのネットワークレイヤー</li>
          <li>自動接続管理と再接続機能</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">2. テキスト操作の簡単さ</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>insert/deleteメソッドの直感的なAPI</li>
          <li>競合解決の自動化（ユーザーは意識不要）</li>
          <li>リアルタイムの他クライアント同期</li>
        </ul>
      </div>
      
      <div>
        <h5 class="font-semibold">3. Awareness API でのプレゼンス情報</h5>
        <ul class="list-disc list-inside ml-4 space-y-1">
          <li>カーソル位置の共有</li>
          <li>ユーザー情報のリアルタイム更新</li>
          <li>ユーザーの参加・退出イベント検知</li>
        </ul>
      </div>
    </div>
    
    <h4 class="font-semibold mt-4 mb-2">CRDTの主要なメリット</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>サーバーがダウンしてもP2Pで継続動作</li>
      <li>ネットワーク分断耐性が高い</li>
      <li>オフライン編集と自動マージ</li>
      <li>スケールアウトが容易</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-2">パフォーマンス最適化</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>デルタ同期による帯域幅節約</li>
      <li>バイナリプロトコルの使用</li>
      <li>ガベージコレクション機能</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-2">セキュリティ考慮事項</h4>
    <ul class="list-disc list-inside ml-4 space-y-1">
      <li>アクセストークンによる認証</li>
      <li>ドキュメントレベルの権限制御</li>
      <li>エンドツーエンド暗号化対応</li>
    </ul>
  `}
/>

<UseCaseExample
  title="リアルタイム描画最適化"
  category="Drawing Optimization"
  description="ホワイトボード機能のための描画データ最適化実装です。ストローク圧縮とバッチング処理を含みます。"
  code={drawingCode}
  language="javascript"
  complexity="advanced"
  features={[
    "60fpsスロットリング",
    "Douglas-Peuckerアルゴリズム",
    "ストローク圧縮",
    "バッチ送信",
    "ローカル即時描画",
    "帯域幅最適化"
  ]}
/>

<UseCaseExample
  title="コード共同レビューシステム"
  category="Code Review System"
  description="リアルタイムコードレビュー機能の実装です。コメント、ハイライト、編集提案機能を含みます。"
  code={codeReviewCode}
  language="javascript"
  complexity="advanced"
  features={[
    "インラインコメント",
    "コードハイライト",
    "編集提案とdiff表示",
    "スレッド化ディスカッション",
    "リアルタイムカーソル同期",
    "レビューステータス管理"
  ]}
/>

</Section>

<Section title="コンフリクト解決の具体的手法" icon="shield">

<Card title="競合解決アルゴリズム" icon="info" accentColor="purple">

**OTによる競合解決の仕組み**

1. **操作の種類と変換ルール**
   - **Insert vs Insert**: 位置の調整が必要
   - **Insert vs Delete**: 削除範囲との関係を考慮
   - **Delete vs Delete**: 重複削除の防止
   - **Move vs Other**: 移動操作の複雑な変換

2. **タイムスタンプベースの順序付け**
   - Lamportタイムスタンプの使用
   - クライアントIDでのタイブレーカー
   - 因果関係の維持

3. **コンフリクト検知と解決**
   - 同一位置への同時編集検知
   - アルゴリズムベースの自動解決
   - ユーザー介入が必要なケースの特定

**CRDTによる競合フリーの仕組み**

1. **数学的性質の利用**
   - 交換法則（Commutative）
   - 結合法則（Associative）
   - アイデンティティ要素の存在

2. **主要なCRDTタイプ**
   - G-Set（Grow-only Set）
   - 2P-Set（Two-Phase Set）
   - LWW-Register（Last-Write-Wins Register）
   - OR-Set（Observed-Remove Set）
   - Y-Text（Yjs Text CRDT）

3. **競合解決の保証**
   - 状態の結合法則
   - イベントの順序無関係
   - 最終的一貫性の保証

</Card>

</Section>

<Section title="カーソル位置の同期方法" icon="cursor">

<Card title="リアルタイムカーソル同期の実装" icon="info" accentColor="teal">

**カーソル位置の管理方法**

1. **座標ベースの位置管理**
   - テキスト内の絶対位置を使用
   - 文字数ベースでのインデックス管理
   - 複数行の文書での行・列管理

2. **相対位置ベースの管理**
   - アンカーポイントからのオフセット
   - 文書構造を考慮した管理
   - テキスト変更時の動的調整

3. **マルチカーソルの視覚化**
   - ユーザーごとのカラーコーディング
   - 名前とアバターの表示
   - カーソルのアニメーション効果

**選択範囲の同期管理**

1. **選択範囲の表現**
   - 開始位置と終了位置のセット
   - 方向性を考慮した管理
   - 範囲の正規化処理

2. **ハイライトの表示**
   - ユーザー固有のハイライトカラー
   - 重複選択範囲の視覚化
   - ライブタイピングの表示

3. **パフォーマンス最適化**
   - カーソル更新のデバウンス処理
   - 非アクティブカーソルの非表示
   - バッチ更新によるトラフィック最適化

</Card>

</Section>

<Section title="パフォーマンスとUXのバランス" icon="balance">

<Card title="ユーザー体験と技術的性能の両立" icon="info" accentColor="orange">

**レスポンシブなインタラクションの実現**

1. **ローカルファースト更新**
   - クライアントでの即座フィードバック
   - 後からのサーバー検証と調整
   - ユーザーのタイピングフローを阻害しない工夫

2. **遅延警告とフォールバック**
   - ネットワーク遅延の視覚化
   - 遅延が大きい場合のユーザー通知
   - オフラインモードへのグレースフルな移行

3. **コンフリクトインジケーター**
   - 競合発生時の視覚的フィードバック
   - 競合解決プロセスの透明性
   - ユーザーの理解を助けるアニメーション

**パフォーマンス最適化戦略**

1. **データサイズの最適化**
   - 差分更新の送信
   - データ圧縮アルゴリズムの適用
   - バイナリプロトコルの使用

2. **ネットワーク効率の向上**
   - バッチ処理でのラウンドトリップ削減
   - デバウンス・スロットリングの実装
   - メッセージの優先度制御

3. **クライアントサイドキャッシュ**
   - ドキュメントスナップショットのキャッシュ
   - スマートプリフェッチング
   - ガベージコレクション戦略

**パフォーマンス指標と目標値**

| 指標 | 目標値 | 計測方法 |
|------|-----------|---------------|
| **タイピングレスポンス** | 16ms以下 | Input to Display |
| **同期遅延** | 100ms以下 | Operation to All Clients |
| **競合解決時間** | 50ms以下 | Conflict Detection to Resolution |
| **メモリ使用量** | 50MB以下 | per 100KB Document |
| **同時接続数** | 100人以上 | per Document |
| **スループット** | 1000ops/sec | Operations per Second |

**開発工数の目安**
- 基本的なテキスト編集: 4週間
- リッチテキスト編集: 8週間
- フルコラボレーション機能: 12週間
- スケール対応: +4週間

</Card>

</Section>

<Section title="ベストプラクティス" icon="tips">

<Card title="実装のポイント" icon="info" accentColor="blue">

### 1. アルゴリズム選択の指針
- **テキスト中心の編集**: OTアルゴリズムが有効
- **構造化データの編集**: CRDTアルゴリズムが有効
- **P2Pアプリケーション**: CRDTが適している
- **ハイブリッドアプローチ**: 複数アルゴリズムの組み合わせ

### 2. パフォーマンス最適化
- **レイジーローディング**: 必要時のみデータを取得
- **デルタ同期**: 全体ではなく変更部分のみを送信
- **メモリ管理**: ガベージコレクションと古い履歴の削除
- **キャッシュ戦略**: 頻繁アクセスデータのキャッシュ

### 3. セキュリティ考慮事項
- **オペレーション検証**: 悪意のある操作のフィルタリング
- **アクセス制御**: ドキュメントレベルの権限管理
- **レート制限**: スパムやDoS攻撃対策
- **データ暗号化**: 機密文書のエンドツーエンド暗号化

### 4. 監視・デバッグ
- **コンフリクトログ**: 競合発生と解決状況のログ収集
- **パフォーマンスメトリクス**: レイテンシ、スループットの計測
- **デバッグツール**: 操作履歴と状態の追跡機能
- **アラートシステム**: 異常検知と自動復旧

### 5. ユーザー体験の向上
- **プレゼンスインジケーター**: 他ユーザーの活動状況表示
- **バージョン履歴**: 変更追跡と復元機能
- **コメントシステム**: コラボレーションを助けるコミュニケーション機能
- **オフラインサポート**: オフライン編集と同期機能

これらのベストプラクティスにより、スケーラブルで高品質な共同編集システムを構築できます。

</Card>

</Section>

</ReferenceLayout>