---
title: "WebSocketを理解するためのHTTP基礎"
description: "HTTP/1.0とHTTP/1.1の接続管理の違いを理解し、WebSocketがHTTPを前提とする理由を学びます"
duration: 45
difficulty: "beginner"
phase: 1
lesson: "2.1"
---

<script>
  import LessonLayout from '$lib/components/common/LessonLayout.svelte';
  import Section from '$lib/components/common/Section.svelte';
  import Card from '$lib/components/common/Card.svelte';
  import NetworkDiagram from '$lib/components/learning/NetworkDiagram.svelte';
  import HTTPConnectionDemo from '$lib/components/learning/HTTPConnectionDemo.svelte';
  import MermaidLazyLoad from '$lib/components/MermaidLazyLoad.svelte';
</script>

<LessonLayout
  lessonId="phase1-network-tech-http-basics"
  title="WebSocketを理解するためのHTTP基礎"
  duration="45分"
  difficulty="beginner"
  prerequisites={['基本的なWeb知識', 'HTTP通信の概念理解']}
  sectionTitle="ネットワーク技術基礎"
  nextLessonId="phase1-network-tech-osi-model"
  nextLessonTitle="OSI参照モデルとWebSocketの位置"
  nextLessonPath="/phase1/network-tech/osi-model"
  learningObjectives={[
    'HTTP/1.0とHTTP/1.1の接続管理の違いを理解',
    'Keep-Alive接続の仕組みとメリットを把握',
    'WebSocketがHTTP/1.1を前提とする理由を学習'
  ]}
>

<Section title="なぜHTTPを学ぶのか？" icon="concept">

<Card title="WebSocketとHTTPの関係" icon="info" accentColor="blue">

WebSocketは**HTTPの上に構築**されています。WebSocketの接続確立プロセスは、実際にはHTTPリクエストから始まります。

```http
GET /chat HTTP/1.1
Host: example.com
Upgrade: websocket
Connection: Upgrade
```

この仕組みを理解するために、まずHTTPの進化を見ていきましょう。

</Card>

</Section>

<Section title="HTTP/1.0の接続モデル" icon="implementation">

<Card title="シンプルだが非効率な設計" icon="clock" accentColor="orange">

HTTP/1.0では、**1つのリクエスト・レスポンスごとに TCP接続を確立・切断**していました。

<MermaidLazyLoad chart={`
sequenceDiagram
    participant C as Client
    participant S as Server
    
    Note over C,S: リクエスト1
    C->>S: TCP Connect
    C->>S: HTTP Request
    S-->>C: HTTP Response
    C->>S: TCP Disconnect
    Note over C,S: 接続終了
    
    Note over C,S: リクエスト2
    C->>S: TCP Connect
    C->>S: HTTP Request
    S-->>C: HTTP Response
    C->>S: TCP Disconnect
    Note over C,S: 接続終了
`} />

</Card>

<Card title="HTTP/1.0の問題点" icon="warning" accentColor="red">

1. **接続オーバーヘッド**: 毎回のTCP 3-wayハンドシェイク
2. **サーバーリソース浪費**: 頻繁な接続確立・切断
3. **レイテンシの増加**: 接続時間が総通信時間に加算
4. **スケーラビリティの制約**: 同時接続数の限界

</Card>

</Section>

<Section title="HTTP/1.1の持続的接続" icon="implementation">

<Card title="Keep-Alive接続の導入" icon="link" accentColor="green">

HTTP/1.1では**持続的接続（Keep-Alive）**がデフォルトになりました。

<MermaidLazyLoad chart={`
sequenceDiagram
    participant C as Client
    participant S as Server
    
    C->>S: TCP Connect
    Note over C,S: 接続確立（一度だけ）
    
    C->>S: HTTP Request 1
    S-->>C: HTTP Response 1
    Note over C,S: 接続維持
    
    C->>S: HTTP Request 2
    S-->>C: HTTP Response 2
    Note over C,S: 接続維持
    
    C->>S: HTTP Request 3
    S-->>C: HTTP Response 3
    Note over C,S: 接続維持
    
    C->>S: TCP Disconnect
    Note over C,S: 明示的に切断
`} />

</Card>

<Card title="HTTP/1.1の改善点" icon="check" accentColor="blue">

1. **接続再利用**: 複数のリクエスト・レスポンスで同じTCP接続を使用
2. **パフォーマンス向上**: 接続確立コストを分散
3. **サーバー効率**: 接続管理オーバーヘッドの削減
4. **パイプライニング**: 複数リクエストの並列送信（理論上）

</Card>

<Card title="Connection: Upgradeヘッダーの仕組み" icon="gear" accentColor="purple">

HTTP/1.1の重要な機能として、**プロトコルアップグレード機構**があります。

```http
GET /chat HTTP/1.1
Host: example.com
Connection: Upgrade
Upgrade: websocket
```

これにより、既存のHTTP接続を**他のプロトコルに切り替える**ことが可能になりました。

</Card>

</Section>

<Section title="WebSocketとHTTPの関係" icon="theory">

<Card title="なぜWebSocketはHTTPを使うのか？" icon="question" accentColor="blue">

WebSocketがHTTPの上に構築される理由。

1. **既存インフラの活用**
   - HTTPプロキシとの互換性
   - ファイアウォールの透過性
   - 既存のポート（80/443）の利用

2. **段階的移行**
   - HTTPサーバーからの自然な拡張
   - 既存のHTTPSセキュリティ機構の活用

3. **標準化のメリット**
   - ブラウザの標準サポート
   - 開発者の学習コストの削減

</Card>

<Card title="WebSocketアップグレードプロセス" icon="flow" accentColor="green">

<NetworkDiagram diagramType="websocket-upgrade" title="WebSocketアップグレードプロセス" />

</Card>

</Section>

<Section title="実践デモ" icon="practice">

<Card title="体験してみよう" icon="play" accentColor="purple">

各プロトコルの接続パターンを実際に体験し、パフォーマンスの違いを比較してみましょう。

<HTTPConnectionDemo />

</Card>

<Card title="デモで確認できること" icon="check" accentColor="green">

デモを実行して以下を観察してください。

1. **HTTP/1.0**: 毎回の接続確立・切断によるオーバーヘッド
2. **HTTP/1.1**: Keep-Aliveによる接続再利用の効果
3. **WebSocket**: 一度の接続確立後の高速メッセージング

### 実行手順

1. **HTTP/1.0テスト**：「HTTP/1.0 Demo」ボタンをクリックして接続パターンを確認
2. **HTTP/1.1テスト**：「HTTP/1.1 Demo」ボタンをクリックしてKeep-Alive効果を観察
3. **WebSocketテスト**：「WebSocket Demo」ボタンをクリックして持続的接続を体験
4. **タイムライン比較**：各プロトコルの接続確立時間を比較
5. **効率性分析**：リクエスト数とレスポンス時間の関係を確認

</Card>

</Section>

<Section title="開発者ツールでの確認" icon="tools">

<Card title="ブラウザ開発者ツールを使った観察" icon="monitor" accentColor="blue">

実際のWebSocketアップグレードを観察してみましょう。

1. **Networkタブを開く**
2. **WebSocketページに接続**
3. **Request Headersを確認**:
   ```http
   Connection: Upgrade
   Upgrade: websocket
   Sec-WebSocket-Key: ...
   Sec-WebSocket-Version: 13
   ```
4. **Response Headersを確認**:
   ```http
   HTTP/1.1 101 Switching Protocols
   Upgrade: websocket
   Connection: Upgrade
   Sec-WebSocket-Accept: ...
   ```

</Card>

<Card title="Connection タイムラインの読み方" icon="chart" accentColor="orange">

- **Queuing**: リクエスト待機時間
- **DNS Lookup**: DNS解決時間
- **Initial Connection**: TCP接続確立時間
- **SSL**: TLS/SSLハンドシェイク時間
- **Request sent**: リクエスト送信時間
- **Waiting (TTFB)**: 最初のバイト受信待機時間

</Card>

</Section>

<Section title="まとめと次のステップ" icon="summary">

<Card title="重要なポイント" icon="star" accentColor="green">

1. **HTTP進化の理解**
   - HTTP/1.0の1リクエスト・1接続モデル
   - HTTP/1.1のKeep-Alive導入による効率化

2. **WebSocketの設計思想**
   - HTTPインフラの活用による実用性
   - アップグレード機構による段階的移行

3. **パフォーマンスへの影響**
   - 接続確立コストの最小化
   - リアルタイム通信の効率性

</Card>

<Card title="学習の確認" icon="check" accentColor="blue">

- [ ] HTTP/1.0とHTTP/1.1の接続管理の違いを説明できる
- [ ] Keep-Alive接続のメリットを理解している
- [ ] WebSocketがHTTPアップグレードを使う理由が分かる
- [ ] ブラウザ開発者ツールでWebSocket接続を観察できる

</Card>

<Card title="関連リソース" icon="book" accentColor="purple">

- [RFC 2616 - HTTP/1.1](https://tools.ietf.org/html/rfc2616)
- [RFC 6455 - WebSocket Protocol](https://tools.ietf.org/html/rfc6455)
- [MDN - HTTP Connection management](https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x)
- [Chrome DevTools Network Reference](https://developers.google.com/web/tools/chrome-devtools/network)

</Card>

</Section>

</LessonLayout>